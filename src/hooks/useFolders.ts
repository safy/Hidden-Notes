/**
 * @file: useFolders.ts
 * @description: React hook –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∞–º–∏
 * @dependencies: storage.ts, types/folder
 * @created: 2025-10-21
 */

import { useState, useEffect, useCallback } from 'react';
import {
  getAllFolders,
  getFolderById,
  createFolder,
  updateFolder,
  deleteFolder,
  getFolderStats,
} from '@/lib/storage';
import { Folder, CreateFolderInput, UpdateFolderInput } from '@/types/folder';

export interface UseFoldersReturn {
  folders: Folder[];
  currentFolderId: string | null;
  isLoading: boolean;
  error: string | null;
  
  // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
  createNewFolder: (input: CreateFolderInput) => Promise<Folder | null>;
  updateExistingFolder: (id: string, updates: UpdateFolderInput) => Promise<Folder | null>;
  deleteExistingFolder: (id: string, moveNotesTo?: string | null) => Promise<boolean>;
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  setCurrentFolder: (folderId: string | null) => void;
  getFolderDetails: (folderId: string) => Promise<Folder | null>;
  
  // –£—Ç–∏–ª–∏—Ç—ã
  refreshFolders: () => Promise<void>;
  getFolderNotesCount: (folderId: string) => Promise<number>;
}

/**
 * Hook –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∞–º–∏
 */
export function useFolders(): UseFoldersReturn {
  const [folders, setFolders] = useState<Folder[]>([]);
  const [currentFolderId, setCurrentFolderId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–ø–æ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const loadFolders = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      const allFolders = await getAllFolders();
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ order
      const sortedFolders = allFolders.sort((a, b) => a.order - b.order);
      
      setFolders(sortedFolders);
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to load folders';
      setError(message);
      console.error('‚ùå Error loading folders:', err);
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    loadFolders();
  }, [loadFolders]);

  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Chrome Storage
  useEffect(() => {
    const handleStorageChange = (changes: { [key: string]: chrome.storage.StorageChange }) => {
      if (changes.hidden_notes) {
        console.log('üì¶ Storage changed, reloading folders');
        loadFolders();
      }
    };

    chrome.storage.onChanged.addListener(handleStorageChange);

    return () => {
      chrome.storage.onChanged.removeListener(handleStorageChange);
    };
  }, [loadFolders]);

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É
  const createNewFolder = useCallback(async (input: CreateFolderInput): Promise<Folder | null> => {
    try {
      setError(null);
      const newFolder = await createFolder(input);
      await loadFolders(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
      return newFolder;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to create folder';
      setError(message);
      console.error('‚ùå Error creating folder:', err);
      return null;
    }
  }, [loadFolders]);

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–∞–ø–∫—É
  const updateExistingFolder = useCallback(
    async (id: string, updates: UpdateFolderInput): Promise<Folder | null> => {
      try {
        setError(null);
        const updatedFolder = await updateFolder(id, updates);
        await loadFolders(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        return updatedFolder;
      } catch (err) {
        const message = err instanceof Error ? err.message : 'Failed to update folder';
        setError(message);
        console.error('‚ùå Error updating folder:', err);
        return null;
      }
    },
    [loadFolders]
  );

  // –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É
  const deleteExistingFolder = useCallback(
    async (id: string, moveNotesTo?: string | null): Promise<boolean> => {
      try {
        setError(null);
        const success = await deleteFolder(id, moveNotesTo);
        
        if (success) {
          // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
          if (currentFolderId === id) {
            setCurrentFolderId(null);
          }
          await loadFolders();
        }
        
        return success;
      } catch (err) {
        const message = err instanceof Error ? err.message : 'Failed to delete folder';
        setError(message);
        console.error('‚ùå Error deleting folder:', err);
        return false;
      }
    },
    [currentFolderId, loadFolders]
  );

  // –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–∞–ø–∫–∏
  const getFolderDetails = useCallback(async (folderId: string): Promise<Folder | null> => {
    try {
      return await getFolderById(folderId);
    } catch (err) {
      console.error('‚ùå Error getting folder details:', err);
      return null;
    }
  }, []);

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ –≤ –ø–∞–ø–∫–µ
  const getFolderNotesCount = useCallback(async (folderId: string): Promise<number> => {
    try {
      const stats = await getFolderStats(folderId);
      return stats.notesCount;
    } catch (err) {
      console.error('‚ùå Error getting folder notes count:', err);
      return 0;
    }
  }, []);

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–∞–ø–∫–∏ –≤—Ä—É—á–Ω—É—é
  const refreshFolders = useCallback(async () => {
    await loadFolders();
  }, [loadFolders]);

  return {
    folders,
    currentFolderId,
    isLoading,
    error,
    createNewFolder,
    updateExistingFolder,
    deleteExistingFolder,
    setCurrentFolder: setCurrentFolderId,
    getFolderDetails,
    refreshFolders,
    getFolderNotesCount,
  };
}

