/**
 * @file: Sidebar.tsx
 * @description: –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–º–µ—Ç–æ–∫ —Å drag & drop
 * @dependencies: React, @dnd-kit, shadcn/ui components
 * @created: 2025-10-15
 */

import React, { useState, useEffect } from 'react';
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
  DragEndEvent,
} from '@dnd-kit/core';
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable';
import { NoteListItem } from './NoteListItem';
import { FolderList } from '@/components/Folder';
import { generateNotePreview } from '@/lib/utils';

export interface SidebarProps {
  notes?: any[]; // Notes array from parent
  folders?: any[]; // Folders array from parent
  currentFolderId?: string | null;
  onNoteSelect?: (noteId: string) => void;
  onNotesReorder?: (reorderedNotes: any[]) => void;
  onNoteArchive?: (noteId: string) => void;
  onNoteDelete?: (noteId: string) => void;
  onNoteColorChange?: (noteId: string, color: string) => void;
  onMoveToFolder?: (noteId: string) => void;
  onFolderSelect?: (folderId: string | null) => void;
  onBackToRoot?: () => void;
  onMoveNoteToFolder?: (noteId: string, folderId: string) => void;
  onMoveFolderToFolder?: (folderId: string, targetFolderId: string | null) => void;
  onReorderFolders?: (folderId: string, newOrder: number) => void;
  onEditFolder?: (folder: any) => void;
  searchQuery?: string;
}

export const Sidebar: React.FC<SidebarProps> = ({ 
  notes = [],
  folders = [],
  currentFolderId = null,
  onNoteSelect, 
  onNotesReorder, 
  onNoteArchive,
  onNoteDelete,
  onNoteColorChange,
  onMoveToFolder,
  onFolderSelect,
  onBackToRoot,
  onMoveNoteToFolder,
  onMoveFolderToFolder,
  onReorderFolders,
  onEditFolder,
  searchQuery = '' 
}) => {
  const [items, setItems] = useState(notes);
  const [activeId, setActiveId] = useState<string | null>(null);
  const [overId, setOverId] = useState<string | null>(null);

  // –û–±–Ω–æ–≤–ª—è–µ–º items –∫–æ–≥–¥–∞ props.notes –º–µ–Ω—è—é—Ç—Å—è
  useEffect(() => {
    setItems(notes);
  }, [notes]);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è drag & drop
  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  const handleDragStart = (event: any) => {
    setActiveId(event.active.id);
  };

  const handleDragOver = (event: any) => {
    setOverId(event.over?.id || null);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (event.active && event.over) {
      console.log('Drag over:', {
        activeId: event.active.id,
        overId: event.over.id,
        activeData: event.active.data.current,
        overData: event.over.data.current
      });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDragEnd = (event: DragEndEvent) => {
    setActiveId(null);
    setOverId(null);
    const { active, over } = event;

    console.log('=== DRAG END DEBUG ===');
    console.log('Active ID:', active.id);
    console.log('Over ID:', over?.id);
    console.log('Active Data:', active.data.current);
    console.log('Over Data:', over?.data.current);
    console.log('Available folders:', folders.map(f => ({ id: f.id, name: f.name, parentId: f.parentId })));
    console.log('Current folder ID:', currentFolderId);
    console.log('========================');

    // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è
    if (active.data.current?.type === 'folder-sortable') {
      const draggedFolderId = active.data.current.folderId;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–∞–ø–∫—É –Ω–∞ –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É
      if (over?.data.current?.type === 'folder-sortable') {
        const targetFolderId = over.data.current.folderId;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –Ω–∞ —Å–∞–º—É —Å–µ–±—è
        if (draggedFolderId === targetFolderId) {
          console.log('Skipping reorder: same folder');
          return;
        }
        
        // –ü–†–ò–û–†–ò–¢–ï–¢: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è
        const draggedFolder = folders.find(f => f.id === draggedFolderId);
        const targetFolder = folders.find(f => f.id === targetFolderId);
        
        console.log('=== FOLDER COMPARISON ===');
        console.log('Dragged folder:', draggedFolder ? { id: draggedFolder.id, name: draggedFolder.name, parentId: draggedFolder.parentId } : 'NOT FOUND');
        console.log('Target folder:', targetFolder ? { id: targetFolder.id, name: targetFolder.name, parentId: targetFolder.parentId } : 'NOT FOUND');
        console.log('========================');
        
        if (draggedFolder && targetFolder) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ—á–µ—Ä–Ω–µ–π –ø–∞–ø–∫–æ–π –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–π –ø–∞–ø–∫–∏
          const isTargetChildOfDragged = (checkFolderId: string): boolean => {
            const checkFolder = folders.find(f => f.id === checkFolderId);
            if (!checkFolder) return false;
            
            if (checkFolder.parentId === draggedFolderId) {
              return true;
            }
            
            if (checkFolder.parentId) {
              return isTargetChildOfDragged(checkFolder.parentId);
            }
            
            return false;
          };
          
          if (isTargetChildOfDragged(targetFolderId)) {
            console.log('Skipping move: would create circular reference');
            return;
          }
          
          // –ü–†–û–í–ï–†–Ø–ï–ú: –ï—Å–ª–∏ –ø–∞–ø–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞–ø–∫–∞—Ö, —ç—Ç–æ –≤–ª–æ–∂–µ–Ω–∏–µ
          console.log('=== PARENT ID COMPARISON ===');
          console.log('Dragged folder parentId:', draggedFolder.parentId);
          console.log('Target folder parentId:', targetFolder.parentId);
          console.log('Are they different?', draggedFolder.parentId !== targetFolder.parentId);
          console.log('============================');
          
          if (draggedFolder.parentId !== targetFolder.parentId) {
            console.log('üéØ NESTING: Moving folder to folder (nesting):', { draggedFolderId, targetFolderId });
            
            if (onMoveFolderToFolder) {
              onMoveFolderToFolder(draggedFolderId, targetFolderId);
            }
            return;
          }
          
          // –ü–†–û–í–ï–†–Ø–ï–ú: –ï—Å–ª–∏ –ø–∞–ø–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ
          if (draggedFolder.parentId === targetFolder.parentId) {
            // –õ–û–ì–ò–ö–ê –†–ê–ó–õ–ò–ß–ï–ù–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤ —Ü–µ–Ω—Ç—Ä –ø–∞–ø–∫–∏ - —ç—Ç–æ –≤–ª–æ–∂–µ–Ω–∏–µ
            // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –º–µ–∂–¥—É –ø–∞–ø–∫–∞–º–∏ - —ç—Ç–æ –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ
            
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ —á—Ç–æ –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ
            // –í–ª–æ–∂–µ–Ω–∏–µ –ø–∞–ø–æ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
            console.log('üîÑ REORDERING: Reordering folders in same parent:', { draggedFolderId, targetFolderId });
            
            // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –ø–∞–ø–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
            const currentLevelFolders = folders
              .filter(f => f.parentId === currentFolderId)
              .sort((a, b) => a.order - b.order);
            
            const oldIndex = currentLevelFolders.findIndex(f => f.id === draggedFolderId);
            const newIndex = currentLevelFolders.findIndex(f => f.id === targetFolderId);
                
            console.log('Current level folders:', currentLevelFolders.map(f => ({ id: f.id, name: f.name, order: f.order })));
            console.log('Old index:', oldIndex, 'New index:', newIndex);
            
            if (oldIndex !== -1 && newIndex !== -1 && oldIndex !== newIndex && onReorderFolders) {
              // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –Ω–æ–≤—ã–º order
              onReorderFolders(draggedFolderId, newIndex);
            }
            return;
          }
        }
      }
    }
    
    // –õ–û–ì–ò–ö–ê –í–õ–û–ñ–ï–ù–ò–Ø –ü–ê–ü–û–ö: –ï—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–∞–ø–∫—É –Ω–∞ –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É
    // –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ, —Ç–æ —ç—Ç–æ –≤–ª–æ–∂–µ–Ω–∏–µ
    if (active.data.current?.type === 'folder-sortable' && over?.data.current?.type === 'folder-sortable') {
      const draggedFolderId = active.data.current.folderId;
      const targetFolderId = over.data.current.folderId;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ
      if (draggedFolderId !== targetFolderId) {
        const draggedFolder = folders.find(f => f.id === draggedFolderId);
        const targetFolder = folders.find(f => f.id === targetFolderId);
        
        if (draggedFolder && targetFolder) {
          // –ï—Å–ª–∏ –ø–∞–ø–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª—è—Ö, —ç—Ç–æ –≤–ª–æ–∂–µ–Ω–∏–µ
          if (draggedFolder.parentId !== targetFolder.parentId) {
            console.log('üéØ NESTING: Moving folder to folder (nesting):', { draggedFolderId, targetFolderId });
            
            if (onMoveFolderToFolder) {
              onMoveFolderToFolder(draggedFolderId, targetFolderId);
            }
            return;
          }
          
          // –ï—Å–ª–∏ –ø–∞–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä–æ–¥–∏—Ç–µ–ª–µ, —ç—Ç–æ —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ–º
          // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —Ö–æ—á–µ—Ç –≤–ª–æ–∂–∏—Ç—å –æ–¥–Ω—É –ø–∞–ø–∫—É –≤ –¥—Ä—É–≥—É—é
          if (draggedFolder.parentId === targetFolder.parentId) {
            console.log('üéØ NESTING: Moving folder to folder (nesting in same parent):', { draggedFolderId, targetFolderId });
            
            if (onMoveFolderToFolder) {
              onMoveFolderToFolder(draggedFolderId, targetFolderId);
            }
            return;
          }
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –∑–∞–º–µ—Ç–∫—É –Ω–∞ –ø–∞–ø–∫—É
    if (over && typeof over.id === 'string' && over.id.startsWith('folder-sortable-')) {
      const folderId = over.id.replace('folder-sortable-', '');
      const noteId = active.id as string;
      
      console.log('üéØ MOVING NOTE TO FOLDER:', { noteId, folderId, overId: over.id });
      
      if (onMoveNoteToFolder) {
        onMoveNoteToFolder(noteId, folderId);
      }
      return;
    }

    // –û–±—ã—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–º–µ—Ç–æ–∫
    if (active.id !== over?.id && !active.id.toString().startsWith('folder-')) {
      setItems((items) => {
        const oldIndex = items.findIndex((item) => item.id === active.id);
        const newIndex = items.findIndex((item) => item.id === over?.id);

        const newItems = arrayMove(items, oldIndex, newIndex);
        onNotesReorder?.(newItems);
        return newItems;
      });
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredNotes = searchQuery.trim()
    ? items.filter(
        (note) =>
          note.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
          note.preview.toLowerCase().includes(searchQuery.toLowerCase())
      )
    : items;

  return (
    <DndContext
      sensors={sensors}
      collisionDetection={closestCenter}
      onDragStart={handleDragStart}
      onDragOver={handleDragOver}
      onDragEnd={handleDragEnd}
    >
      <div className="w-full border-r border-border bg-muted/30 flex flex-col h-full">
        {/* Folders List */}
        <div className="flex-shrink-0">
          <FolderList
            currentFolderId={currentFolderId}
            onFolderSelect={onFolderSelect || (() => {})}
            onEditFolder={onEditFolder || (() => {})}
            onDrop={onMoveNoteToFolder}
            onBackToRoot={onBackToRoot}
            onMoveFolder={onMoveFolderToFolder}
            activeId={activeId}
            overId={overId}
          />
        </div>

        {/* Notes List */}
        <div className="flex-1 overflow-y-auto">
          {filteredNotes.length === 0 ? (
            <div className="p-8 text-center text-sm text-muted-foreground">
              {searchQuery ? '–ó–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫'}
            </div>
          ) : (
            <SortableContext
              items={filteredNotes.map((note) => note.id)}
              strategy={verticalListSortingStrategy}
            >
              <div className="p-2 space-y-1">
                {filteredNotes.map((note) => (
                  <NoteListItem
                    key={note.id}
                    id={note.id}
                    title={note.title}
                    preview={generateNotePreview(note.content)}
                    updatedAt={note.updatedAt}
                    isActive={note.isActive}
                    color={note.color}
                    onClick={() => onNoteSelect?.(note.id)}
                    onArchive={onNoteArchive}
                    onDelete={onNoteDelete}
                    onColorChange={onNoteColorChange}
                    onMoveToFolder={onMoveToFolder}
                  />
                ))}
              </div>
            </SortableContext>
          )}
        </div>

        {/* Footer Info */}
        <div className="p-3 border-t border-border">
          <div className="text-xs text-muted-foreground text-center">
            {searchQuery && (
              <div className="mb-1">
                –ù–∞–π–¥–µ–Ω–æ: {filteredNotes.length} –∏–∑ {items.length}
              </div>
            )}
            {filteredNotes.length} {filteredNotes.length === 1 ? '–∑–∞–º–µ—Ç–∫–∞' : '–∑–∞–º–µ—Ç–æ–∫'}
          </div>
        </div>
      </div>
    </DndContext>
  );
};

