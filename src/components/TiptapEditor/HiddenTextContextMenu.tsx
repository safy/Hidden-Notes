/**
 * @file: HiddenTextContextMenu.tsx
 * @description: Context menu –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è/—Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—Å—Ç–∞
 * @created: 2025-10-17
 */

import React, { useState, useEffect } from 'react';
import { Editor } from '@tiptap/react';
import { Eye, EyeOff } from 'lucide-react';
import { TextSelection } from '@tiptap/pm/state';

interface HiddenTextContextMenuProps {
  editor: Editor | null;
}

export const HiddenTextContextMenu: React.FC<HiddenTextContextMenuProps> = ({ editor }) => {
  const [showMenu, setShowMenu] = useState(false);
  const [menuPos, setMenuPos] = useState({ x: 0, y: 0 });
  const [isHidden, setIsHidden] = useState(false);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ hidden text span —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –ø–æ–∑–∏—Ü–∏—é
  const findHiddenTextAtPos = (pos: number): { start: number; end: number } | null => {
    if (!editor) return null;

    let result: { start: number; end: number } | null = null;

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —É–∑–ª–∞–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    editor.state.doc.nodesBetween(0, editor.state.doc.content.size, (node, nodeStart) => {
      if (node.isText) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ hiddenText mark –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —É–∑–ª–µ
        const hasHiddenMark = node.marks.some((mark) => mark.type.name === 'hiddenText');

        if (hasHiddenMark) {
          const nodeEnd = nodeStart + node.nodeSize;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ cursor –≤ —ç—Ç–æ–º —É–∑–ª–µ
          if (pos > nodeStart && pos <= nodeEnd) {
            result = { start: nodeStart, end: nodeEnd };
            return false; // Stop iteration
          }
        }
      }
      return true; // Continue iteration
    });

    return result;
  };

  useEffect(() => {
    if (!editor) return;

    const handleContextMenu = (e: MouseEvent) => {
      e.preventDefault();
      console.log('üîç Context menu handler triggered!');

      const { selection } = editor.state;
      const { $from, $to } = selection;
      let hasHiddenText = false;

      if (!selection.empty) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω–æ —Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç
        editor.state.doc.nodesBetween($from.pos, $to.pos, (node) => {
          if (node.marks.some((mark) => mark.type.name === 'hiddenText')) {
            hasHiddenText = true;
          }
        });
        console.log('üìã Has selection, hasHiddenText:', hasHiddenText);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è, –∏—â–µ–º —Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        const hiddenSpan = findHiddenTextAtPos($from.pos);
        console.log('üîé No selection, hiddenSpan:', hiddenSpan);
        if (hiddenSpan) {
          hasHiddenText = true;
          // –í—ã–¥–µ–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–π span
          const start = editor.state.doc.resolve(hiddenSpan.start);
          const end = editor.state.doc.resolve(hiddenSpan.end);
          editor.view.dispatch(editor.state.tr.setSelection(new TextSelection(start, end)));
        }
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
      if (selection.empty && !hasHiddenText) {
        console.log('‚ùå No selection and no hidden text, hiding menu');
        setShowMenu(false);
        return;
      }

      setIsHidden(hasHiddenText);
      setMenuPos({ x: e.clientX, y: e.clientY });
      setShowMenu(true);
      console.log('‚úÖ Showing menu! isHidden:', hasHiddenText);
    };

    const handleClick = () => {
      setShowMenu(false);
    };

    const editorElement = editor.view.dom;
    editorElement.addEventListener('contextmenu', handleContextMenu);
    document.addEventListener('click', handleClick);

    return () => {
      editorElement.removeEventListener('contextmenu', handleContextMenu);
      document.removeEventListener('click', handleClick);
    };
  }, [editor]);

  const toggleHiddenText = (hide: boolean) => {
    if (!editor) return;

    console.log('üîò toggleHiddenText called, hide:', hide);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    const { selection } = editor.state;
    console.log('Current selection:', selection.$from.pos, '-', selection.$to.pos);

    if (hide) {
      // –î–ª—è —Å–∫—Ä—ã—Ç–∏—è:
      // 1. –ü—Ä–∏–º–µ–Ω—è–µ–º mark –∫ –≤—ã–¥–µ–ª–µ–Ω–∏—é
      editor.chain().focus().toggleMark('hiddenText').run();
      console.log('‚úÖ Mark applied');
      
      // 2. –ó–∞—Ç–µ–º —É–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —á—Ç–æ–±—ã mark –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è
      editor.chain().focus().setTextSelection(selection.$to.pos).run();
      console.log('‚úÖ Selection cleared, cursor moved to end');
    } else {
      // –î–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —É–¥–∞–ª—è–µ–º mark
      const result = editor.chain().focus().unsetMark('hiddenText').run();
      console.log('unsetMark result:', result);
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –º–µ–Ω—é —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å
    setTimeout(() => {
      setShowMenu(false);
    }, 50);
  };

  if (!showMenu) return null;

  return (
    <div
      className="fixed bg-white border border-gray-300 rounded-lg shadow-lg p-2 z-50 flex gap-2"
      style={{ top: `${menuPos.y}px`, left: `${menuPos.x}px` }}
      onClick={(e) => e.stopPropagation()}
    >
      {isHidden ? (
        <button
          className="p-2 hover:bg-gray-100 rounded transition-colors"
          onClick={() => toggleHiddenText(false)}
          title="–£–±—Ä–∞—Ç—å —Å–∫—Ä—ã—Ç–∏–µ"
        >
          <EyeOff className="h-5 w-5 text-gray-700" />
        </button>
      ) : (
        <button
          className="p-2 hover:bg-gray-100 rounded transition-colors"
          onClick={() => toggleHiddenText(true)}
          title="–°–∫—Ä—ã—Ç—å —Ç–µ–∫—Å—Ç"
        >
          <Eye className="h-5 w-5 text-gray-700" />
        </button>
      )}
    </div>
  );
};
