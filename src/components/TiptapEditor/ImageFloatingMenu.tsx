/**
 * @file: ImageFloatingMenu.tsx
 * @description: Floating toolbar –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç BubbleMenu –∏–∑ Tiptap –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è selection
 * @dependencies: React, @tiptap/react, shadcn/ui, lucide-react
 * @created: 2025-01-XX
 */

import React, { useEffect } from 'react';
import { BubbleMenu, Editor } from '@tiptap/react';
import { Button } from '@/components/ui/button';
import { AlignLeft, AlignCenter, AlignRight, Download, Trash2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ImageFloatingMenuProps {
  editor: Editor;
}

export const ImageFloatingMenu: React.FC<ImageFloatingMenuProps> = ({ editor }) => {
  const { toast } = useToast();

  // –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω
  useEffect(() => {
    console.log('üéØ ImageFloatingMenu component mounted');
  }, []);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getImageData = () => {
    const { state } = editor;
    const { selection } = state;
    
    // –î–ª—è –±–ª–æ—á–Ω—ã—Ö —É–∑–ª–æ–≤ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
    // Selection –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ —É–∑–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let imageNode: any = null;
    let imagePos = -1;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∑–ª—ã –≤ —à–∏—Ä–æ–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤–æ–∫—Ä—É–≥ selection
    const checkRange = Math.max(5, selection.to - selection.from + 10);
    const startPos = Math.max(0, selection.from - checkRange);
    const endPos = Math.min(state.doc.content.size, selection.to + checkRange);
    
    state.doc.nodesBetween(startPos, endPos, (node, pos) => {
      if (node.type.name === 'imageResize') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ selection –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∏–ª–∏ —Å—Ä–∞–∑—É —Ä—è–¥–æ–º —Å —É–∑–ª–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const nodeEnd = pos + node.nodeSize;
        const isSelected = 
          (selection.from >= pos && selection.from <= nodeEnd) ||
          (selection.to >= pos && selection.to <= nodeEnd) ||
          (selection.from <= pos && selection.to >= nodeEnd) ||
          // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—É—Ä—Å–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–ª–∏–∑–∫–æ –∫ —É–∑–ª—É (–¥–ª—è –±–ª–æ—á–Ω—ã—Ö —É–∑–ª–æ–≤)
          (Math.abs(selection.from - pos) <= 2) ||
          (Math.abs(selection.to - pos) <= 2);
        
        if (isSelected) {
          imageNode = node;
          imagePos = pos;
          return false;
        }
      }
      return true;
    });
    
    if (imageNode && imagePos >= 0) {
      return {
        node: imageNode,
        pos: imagePos,
        align: imageNode.attrs.align || 'left',
        src: imageNode.attrs.src,
        alt: imageNode.attrs.alt,
      };
    }
    
    return null;
  };

  const imageData = getImageData();
  const currentAlign = imageData?.align || 'left';

  const handleAlignChange = (newAlign: 'left' | 'center' | 'right') => {
    editor.chain().focus().setImageAlign(newAlign).run();
  };

  const handleDownload = async () => {
    if (!imageData) return;
    
    try {
      const imageSrc = imageData.src;
      
      // –î–ª—è base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (imageSrc.startsWith('data:')) {
        const link = document.createElement('a');
        link.href = imageSrc;
        link.download = imageData.alt || 'image.png';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        toast({
          title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ',
          duration: 2000,
        });
      } else {
        // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö URL
        const response = await fetch(imageSrc);
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = imageData.alt || 'image.png';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
        toast({
          title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ',
          duration: 2000,
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        variant: 'destructive',
        duration: 3000,
      });
    }
  };

  const handleDelete = () => {
    if (!imageData) return;
    
    const { tr } = editor.state;
    tr.delete(imageData.pos, imageData.pos + imageData.node.nodeSize);
    editor.view.dispatch(tr);
    
    toast({
      title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
      duration: 2000,
    });
  };

  return (
    <BubbleMenu
      editor={editor}
      tippyOptions={{ 
        duration: 100,
        placement: 'top',
        offset: [0, 8],
      }}
      shouldShow={({ state }) => {
        const { selection } = state;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        let hasImage = false;
        
        // –ò—â–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        state.doc.descendants((node, pos) => {
          if (node.type.name === 'imageResize') {
            const nodeEnd = pos + node.nodeSize;
            
            // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: selection –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ —É–∑–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            // –∏–ª–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–µ–≥–æ (nodeEnd), –Ω–æ –ù–ï –Ω–∞ —Ç–µ–∫—Å—Ç–µ –ø–µ—Ä–µ–¥ —É–∑–ª–æ–º
            const isInsideImage = 
              // Selection –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–Ω—É—Ç—Ä–∏ —É–∑–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              (selection.from >= pos && selection.to <= nodeEnd) ||
              // Selection –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —É–∑–ª–∞ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–µ–≥–æ (–¥–ª—è –±–ª–æ—á–Ω—ã—Ö —É–∑–ª–æ–≤)
              (selection.from >= pos && selection.from < nodeEnd && selection.to === nodeEnd + 1) ||
              // Selection –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å —É–∑–µ–ª (–æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞)
              (selection.from === pos && selection.to === nodeEnd);
            
            if (isInsideImage) {
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ selection –ù–ï –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —É–∑–ª–µ
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∑–µ–ª –≤ –Ω–∞—á–∞–ª–µ selection
              const nodeAtFrom = state.doc.nodeAt(selection.from);
              
              // –ï—Å–ª–∏ —É–∑–µ–ª –≤ –Ω–∞—á–∞–ª–µ selection - —ç—Ç–æ —Ç–µ–∫—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
              if (nodeAtFrom && nodeAtFrom.isText) {
                return true; // –≠—Ç–æ —Ç–µ–∫—Å—Ç, –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ selection –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —É–∑–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              // –î–ª—è –±–ª–æ—á–Ω—ã—Ö —É–∑–ª–æ–≤ selection –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ nodeEnd (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É–∑–ª–∞)
              if ((selection.from >= pos && selection.from < nodeEnd) || 
                  (selection.from === pos && selection.to >= pos)) {
                hasImage = true;
                return false; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
              }
            }
          }
          return true;
        });
        
        return hasImage;
      }}
    >
      <div className="flex items-center gap-1 bg-background border border-border rounded-md shadow-lg p-1">
        {/* –ö–Ω–æ–ø–∫–∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */}
        <Button
          variant={currentAlign === 'left' ? 'default' : 'ghost'}
          size="icon"
          className="h-8 w-8"
          onClick={() => handleAlignChange('left')}
          title="–í—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é"
        >
          <AlignLeft className="h-4 w-4" />
        </Button>
        <Button
          variant={currentAlign === 'center' ? 'default' : 'ghost'}
          size="icon"
          className="h-8 w-8"
          onClick={() => handleAlignChange('center')}
          title="–í—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ —Ü–µ–Ω—Ç—Ä—É"
        >
          <AlignCenter className="h-4 w-4" />
        </Button>
        <Button
          variant={currentAlign === 'right' ? 'default' : 'ghost'}
          size="icon"
          className="h-8 w-8"
          onClick={() => handleAlignChange('right')}
          title="–í—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é"
        >
          <AlignRight className="h-4 w-4" />
        </Button>

        <div className="w-px h-6 bg-border mx-1" />

        {/* –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è */}
        <Button
          variant="ghost"
          size="icon"
          className="h-8 w-8"
          onClick={handleDownload}
          title="–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        >
          <Download className="h-4 w-4" />
        </Button>

        {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
        <Button
          variant="ghost"
          size="icon"
          className="h-8 w-8 text-destructive hover:text-destructive hover:bg-destructive/10"
          onClick={handleDelete}
          title="–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        >
          <Trash2 className="h-4 w-4" />
        </Button>
      </div>
    </BubbleMenu>
  );
};

