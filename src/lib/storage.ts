/**
 * @file: storage.ts
 * @description: –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è –Ω–∞–¥ Chrome Storage API –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏
 * @dependencies: Chrome Extension Storage API, types/note, types/folder, data-protection
 * @created: 2025-10-17
 * @updated: 2025-10-21 - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞–ø–æ–∫ –∏ –∞—Ä—Ö–∏–≤–∞
 */

import { Note, StorageSchema, DEFAULT_SETTINGS, UpdateNoteInput } from '@/types/note';
import { Folder, createFolder as createFolderHelper, CreateFolderInput, UpdateFolderInput } from '@/types/folder';
import { saveNoteVersion, moveToTrash } from './data-protection';

const STORAGE_KEY = 'hidden_notes';
const SCHEMA_VERSION = 2; // –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∞–ø–æ–∫

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å storage —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
 */
export async function initializeStorage(): Promise<void> {
  const data = await chrome.storage.local.get(STORAGE_KEY);
  
  if (!data[STORAGE_KEY]) {
    const initialSchema: StorageSchema = {
      version: SCHEMA_VERSION,
      notes: [],
      folders: [],
      settings: DEFAULT_SETTINGS,
      currentNoteId: null,
      currentFolderId: null,
    };
    
    await chrome.storage.local.set({ [STORAGE_KEY]: initialSchema });
  } else {
    // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    await migrateStorageSchema(data[STORAGE_KEY]);
  }
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
 */
async function migrateStorageSchema(schema: any): Promise<void> {
  const currentVersion = schema.version || 1;
  
  if (currentVersion < SCHEMA_VERSION) {
    console.log(`üîÑ Migrating storage from v${currentVersion} to v${SCHEMA_VERSION}`);
    
    // –ú–∏–≥—Ä–∞—Ü–∏—è v1 ‚Üí v2: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–æ–∫
    if (currentVersion === 1 || !schema.version) {
      schema.version = 2;
      schema.folders = schema.folders || [];
      schema.currentFolderId = null;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
      schema.notes = schema.notes.map((note: Note) => ({
        ...note,
        folderId: note.folderId || null,
        isArchived: note.isArchived || false,
        order: note.order || 0,
      }));
      
      await chrome.storage.local.set({ [STORAGE_KEY]: schema });
      console.log('‚úÖ Migration completed: added folders support');
    }
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ storage
 */
export async function getAllNotes(): Promise<Note[]> {
  const data = await chrome.storage.local.get(STORAGE_KEY);
  const schema = data[STORAGE_KEY] as StorageSchema;
  return schema?.notes || [];
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–º–µ—Ç–∫—É –ø–æ ID
 */
export async function getNoteById(noteId: string): Promise<Note | null> {
  const notes = await getAllNotes();
  return notes.find(note => note.id === noteId) || null;
}

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
 */
export async function createNote(note: Omit<Note, 'createdAt' | 'updatedAt'>): Promise<Note> {
  const data = await chrome.storage.local.get(STORAGE_KEY);
  const schema = data[STORAGE_KEY] as StorageSchema;
  
  const newNote: Note = {
    ...note,
    createdAt: Date.now(),
    updatedAt: Date.now(),
  };
  
  schema.notes.push(newNote);
  await chrome.storage.local.set({ [STORAGE_KEY]: schema });
  
  return newNote;
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
 */
export async function updateNote(noteId: string, updates: Partial<Omit<Note, 'id' | 'createdAt'>>): Promise<Note | null> {
  const data = await chrome.storage.local.get(STORAGE_KEY);
  const schema = data[STORAGE_KEY] as StorageSchema;
  
  const noteIndex = schema.notes.findIndex(note => note.id === noteId);
  if (noteIndex === -1) return null;
  
  const existingNote = schema.notes[noteIndex];
  if (!existingNote) return null;
  
  const updatedNote: Note = {
    id: existingNote.id,
    title: updates.title ?? existingNote.title,
    content: updates.content ?? existingNote.content,
    color: updates.color ?? existingNote.color,
    createdAt: existingNote.createdAt,
    updatedAt: Date.now(),
    tags: updates.tags ?? existingNote.tags,
    isPinned: updates.isPinned ?? existingNote.isPinned,
    folderId: updates.folderId ?? existingNote.folderId,
    isArchived: updates.isArchived ?? existingNote.isArchived,
    archivedAt: updates.archivedAt ?? existingNote.archivedAt,
    order: updates.order ?? existingNote.order,
  };
  
  schema.notes[noteIndex] = updatedNote;
  await chrome.storage.local.set({ [STORAGE_KEY]: schema });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Å–∏—é –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
  await saveNoteVersion(updatedNote);
  
  return updatedNote;
}

/**
 * –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É (soft delete - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É)
 */
export async function deleteNote(noteId: string): Promise<boolean> {
  const data = await chrome.storage.local.get(STORAGE_KEY);
  const schema = data[STORAGE_KEY] as StorageSchema;
  
  const noteIndex = schema.notes.findIndex(note => note.id === noteId);
  if (noteIndex === -1) return false;
  
  const noteToDelete = schema.notes[noteIndex];
  if (!noteToDelete) return false;
  
  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  await moveToTrash(noteToDelete);
  
  // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  schema.notes = schema.notes.filter(note => note.id !== noteId);
  await chrome.storage.local.set({ [STORAGE_KEY]: schema });
  
  return true;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è storage
 */
export async function getStorageStats(): Promise<{
  usedBytes: number;
  totalBytes: number;
  percentUsed: number;
  notesCount: number;
}> {
  const bytesInUse = await chrome.storage.local.getBytesInUse(null);
  const totalBytes = chrome.storage.local.QUOTA_BYTES || 10485760; // 10MB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const notes = await getAllNotes();
  
  return {
    usedBytes: bytesInUse,
    totalBytes,
    percentUsed: (bytesInUse / totalBytes) * 100,
    notesCount: notes.length,
  };
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ JSON
 */
export async function exportNotes(): Promise<string> {
  const notes = await getAllNotes();
  return JSON.stringify(notes, null, 2);
}

// ============================================================
// FOLDERS CRUD OPERATIONS
// ============================================================

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏ –∏–∑ storage
 */
export async function getAllFolders(): Promise<Folder[]> {
  const data = await chrome.storage.local.get(STORAGE_KEY);
  const schema = data[STORAGE_KEY] as StorageSchema;
  return schema?.folders || [];
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫—É –ø–æ ID
 */
export async function getFolderById(folderId: string): Promise<Folder | null> {
  const folders = await getAllFolders();
  return folders.find(f => f.id === folderId) || null;
}

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É
 */
export async function createFolder(input: CreateFolderInput): Promise<Folder> {
  const data = await chrome.storage.local.get(STORAGE_KEY);
  const schema = data[STORAGE_KEY] as StorageSchema;
  
  // –ï—Å–ª–∏ order –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—Ç–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü
  if (input.order === undefined) {
    const maxOrder = schema.folders.reduce((max, f) => Math.max(max, f.order), -1);
    input.order = maxOrder + 1;
  }
  
  const newFolder = createFolderHelper(input);
  schema.folders.push(newFolder);
  
  await chrome.storage.local.set({ [STORAGE_KEY]: schema });
  
  console.log('üìÅ Folder created:', newFolder.name, newFolder.id);
  return newFolder;
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –ø–∞–ø–∫—É
 */
export async function updateFolder(
  folderId: string,
  updates: UpdateFolderInput
): Promise<Folder | null> {
  console.log('updateFolder called:', { folderId, updates });
  
  const data = await chrome.storage.local.get(STORAGE_KEY);
  const schema = data[STORAGE_KEY] as StorageSchema;
  
  console.log('Current schema folders:', schema.folders.map(f => ({ id: f.id, name: f.name })));
  
  const folderIndex = schema.folders.findIndex(f => f.id === folderId);
  if (folderIndex === -1) {
    console.error('‚ùå Folder not found:', folderId);
    return null;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è (—Å–æ—Ö—Ä–∞–Ω—è—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
  const currentFolder = schema.folders[folderIndex];
  if (!currentFolder) {
    console.error('‚ùå Folder unexpectedly undefined');
    return null;
  }
  
  console.log('Current folder:', currentFolder);
  
  schema.folders[folderIndex] = {
    id: currentFolder.id,
    name: updates.name ?? currentFolder.name,
    color: updates.color ?? currentFolder.color,
    icon: updates.icon ?? currentFolder.icon,
    parentId: updates.parentId !== undefined ? updates.parentId : currentFolder.parentId,
    isExpanded: updates.isExpanded ?? currentFolder.isExpanded,
    order: updates.order ?? currentFolder.order,
    createdAt: currentFolder.createdAt,
    updatedAt: Date.now(),
  };
  
  await chrome.storage.local.set({ [STORAGE_KEY]: schema });
  
  const updatedFolder = schema.folders[folderIndex];
  if (!updatedFolder) {
    console.error('‚ùå Folder unexpectedly missing after update');
    return null;
  }
  
  console.log('üìÅ Folder updated:', updatedFolder.name);
  return updatedFolder;
}

/**
 * –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É (—Å –æ–ø—Ü–∏–µ–π –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–º–µ—Ç–æ–∫)
 */
export async function deleteFolder(
  folderId: string,
  moveNotesToFolder?: string | null
): Promise<boolean> {
  const data = await chrome.storage.local.get(STORAGE_KEY);
  const schema = data[STORAGE_KEY] as StorageSchema;
  
  const folderIndex = schema.folders.findIndex(f => f.id === folderId);
  if (folderIndex === -1) {
    console.error('‚ùå Folder not found:', folderId);
    return false;
  }
  
  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ –ø–∞–ø–∫–µ
  const notesInFolder = schema.notes.filter(n => n.folderId === folderId);
  
  if (notesInFolder.length > 0) {
    if (moveNotesToFolder !== undefined) {
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
      schema.notes = schema.notes.map(note =>
        note.folderId === folderId
          ? { ...note, folderId: moveNotesToFolder, updatedAt: Date.now() }
          : note
      );
      console.log(`üìù Moved ${notesInFolder.length} notes to ${moveNotesToFolder || 'root'}`);
    } else {
      // –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤–º–µ—Å—Ç–µ —Å –ø–∞–ø–∫–æ–π (–ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É)
      for (const note of notesInFolder) {
        await moveToTrash(note);
      }
      schema.notes = schema.notes.filter(n => n.folderId !== folderId);
      console.log(`üóëÔ∏è Moved ${notesInFolder.length} notes to trash`);
    }
  }
  
  // –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É
  schema.folders.splice(folderIndex, 1);
  
  // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
  if (schema.currentFolderId === folderId) {
    schema.currentFolderId = null;
  }
  
  await chrome.storage.local.set({ [STORAGE_KEY]: schema });
  
  console.log('üóëÔ∏è Folder deleted:', folderId);
  return true;
}

/**
 * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –ø–∞–ø–æ–∫ (drag & drop)
 */
export async function reorderFolders(
  folderId: string,
  newOrder: number
): Promise<boolean> {
  const data = await chrome.storage.local.get(STORAGE_KEY);
  const schema = data[STORAGE_KEY] as StorageSchema;
  
  const folderIndex = schema.folders.findIndex(f => f.id === folderId);
  if (folderIndex === -1) {
    console.error('‚ùå Folder not found:', folderId);
    return false;
  }
  
  const folder = schema.folders[folderIndex]!;
  const parentId = folder.parentId;
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ —Ç–æ–≥–æ –∂–µ —É—Ä–æ–≤–Ω—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ order
  const sameLevelFolders = schema.folders
    .filter(f => f.parentId === parentId)
    .sort((a, b) => a.order - b.order);
  
  console.log('üì¶ Before reorder:', sameLevelFolders.map(f => ({ id: f.id.slice(-6), order: f.order })));
  
  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–∞–ø–∫–∏ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
  const currentIndex = sameLevelFolders.findIndex(f => f.id === folderId);
  
  if (currentIndex === -1 || newOrder < 0 || newOrder >= sameLevelFolders.length) {
    console.error('‚ùå Invalid reorder parameters:', { currentIndex, newOrder, length: sameLevelFolders.length });
    return false;
  }
  
  // –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (arrayMove logic)
  const [movedFolder] = sameLevelFolders.splice(currentIndex, 1);
  sameLevelFolders.splice(newOrder, 0, movedFolder!);
  
  console.log('üì¶ After reorder:', sameLevelFolders.map(f => ({ id: f.id.slice(-6), order: f.order })));
  
  // –û–±–Ω–æ–≤–ª—è–µ–º order –¥–ª—è –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ
  sameLevelFolders.forEach((f, index) => {
    const idx = schema.folders.findIndex(folder => folder.id === f.id);
    if (idx !== -1) {
      schema.folders[idx]!.order = index;
      schema.folders[idx]!.updatedAt = Date.now();
    }
  });
  
  await chrome.storage.local.set({ [STORAGE_KEY]: schema });
  
  console.log('üìÅ Folders reordered');
  return true;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ
 */
export async function getNotesByFolder(folderId: string | null): Promise<Note[]> {
  const notes = await getAllNotes();
  
  // null = –∑–∞–º–µ—Ç–∫–∏ –±–µ–∑ –ø–∞–ø–∫–∏ (–∫–æ—Ä–µ–Ω—å)
  if (folderId === null) {
    return notes.filter(note => !note.folderId && !note.isArchived);
  }
  
  return notes.filter(note => note.folderId === folderId && !note.isArchived);
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
 */
export async function getArchivedNotes(): Promise<Note[]> {
  const notes = await getAllNotes();
  return notes.filter(note => note.isArchived);
}

/**
 * –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –ø–∞–ø–∫—É
 */
export async function moveNoteToFolder(
  noteId: string,
  folderId: string | null
): Promise<boolean> {
  console.log('moveNoteToFolder called:', { noteId, folderId });
  
  const note = await getNoteById(noteId);
  if (!note) {
    console.error('Note not found for move:', noteId);
    return false;
  }
  
  console.log('Note before move:', { id: note.id, title: note.title, folderId: note.folderId });
  
  const result = await updateNote(noteId, { folderId });
  
  if (result) {
    console.log('Note after move:', { id: result.id, title: result.title, folderId: result.folderId });
  } else {
    console.error('Failed to update note');
  }
  
  return result !== null;
}

/**
 * –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –∞—Ä—Ö–∏–≤ / –≤–µ—Ä–Ω—É—Ç—å –∏–∑ –∞—Ä—Ö–∏–≤–∞
 */
export async function toggleNoteArchive(noteId: string): Promise<boolean> {
  const note = await getNoteById(noteId);
  if (!note) return false;
  
  const updates: UpdateNoteInput = {
    isArchived: !note.isArchived,
    archivedAt: !note.isArchived ? Date.now() : undefined,
  };
  
  const result = await updateNote(noteId, updates);
  console.log(note.isArchived ? 'üì§ Note unarchived' : 'üì• Note archived', noteId);
  return result !== null;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞–ø–∫–µ
 */
export async function getFolderStats(folderId: string): Promise<{
  notesCount: number;
  archivedCount: number;
  lastUpdated: number;
}> {
  const allNotes = await getAllNotes();
  
  const folderNotes = allNotes.filter(n => n.folderId === folderId);
  const activeNotes = folderNotes.filter(n => !n.isArchived);
  const archivedNotes = folderNotes.filter(n => n.isArchived);
  
  const lastUpdated = folderNotes.length > 0
    ? Math.max(...folderNotes.map(n => n.updatedAt))
    : 0;
  
  return {
    notesCount: activeNotes.length,
    archivedCount: archivedNotes.length,
    lastUpdated,
  };
}

/**
 * –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É –≤ –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É
 */
export async function moveFolderToFolder(
  folderId: string,
  targetFolderId: string | null
): Promise<boolean> {
  console.log('moveFolderToFolder called:', { folderId, targetFolderId });

  const folder = await getFolderById(folderId);
  if (!folder) {
    console.error('Folder not found for move:', folderId);
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É –≤ —Å–∞–º—É —Å–µ–±—è –∏–ª–∏ –≤ —Å–≤–æ—é –¥–æ—á–µ—Ä–Ω—é—é –ø–∞–ø–∫—É
  if (targetFolderId === folderId) {
    console.error('Cannot move folder into itself');
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ (–ø–∞–ø–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Å–≤–æ—é –¥–æ—á–µ—Ä–Ω—é—é –ø–∞–ø–∫—É)
  if (targetFolderId) {
    const targetFolder = await getFolderById(targetFolderId);
    if (targetFolder && targetFolder.parentId === folderId) {
      console.error('Cannot move folder into its own child');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É –≤ —Å–∞–º—É —Å–µ–±—è
    if (targetFolderId === folderId) {
      console.error('Cannot move folder into itself');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
    const checkCircularReference = async (checkFolderId: string): Promise<boolean> => {
      const checkFolder = await getFolderById(checkFolderId);
      if (!checkFolder) return false;
      
      if (checkFolder.parentId === folderId) {
        return true; // –ù–∞–π–¥–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞
      }
      
      if (checkFolder.parentId) {
        return await checkCircularReference(checkFolder.parentId);
      }
      
      return false;
    };
    
    if (await checkCircularReference(targetFolderId)) {
      console.error('Cannot move folder: would create circular reference');
      return false;
    }
  }

  console.log('Folder before move:', { id: folder.id, name: folder.name, parentId: folder.parentId });

  // –ü—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –≤ –Ω–æ–≤—É—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º order –≤ –∫–æ–Ω–µ—Ü
  let newOrder = folder.order;
  if (folder.parentId !== targetFolderId) {
    // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π order —Å—Ä–µ–¥–∏ –ø–∞–ø–æ–∫ –≤ —Ü–µ–ª–µ–≤–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ
    const data = await chrome.storage.local.get(STORAGE_KEY);
    const schema = data[STORAGE_KEY] as StorageSchema;
    const targetLevelFolders = schema.folders.filter(f => f.parentId === targetFolderId);
    newOrder = targetLevelFolders.length > 0 ? Math.max(...targetLevelFolders.map(f => f.order)) + 1 : 0;
  }

  const result = await updateFolder(folderId, { parentId: targetFolderId, order: newOrder });

  if (result) {
    console.log('Folder after move:', { id: result.id, name: result.name, parentId: result.parentId, order: result.order });
  } else {
    console.error('Failed to update folder');
  }

  return result !== null;
}

/**
 * –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏–∑ JSON
 */
export async function importNotes(jsonString: string): Promise<number> {
  try {
    const importedNotes = JSON.parse(jsonString) as Array<{
      id: string;
      title: string;
      content: string;
      createdAt?: number;
      updatedAt?: number;
      tags?: string[];
      isPinned?: boolean;
    }>;
    const data = await chrome.storage.local.get(STORAGE_KEY);
    const schema = data[STORAGE_KEY] as StorageSchema;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ IDs –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
    const notesWithNewIds: Note[] = importedNotes.map(note => {
      const newNote: Note = {
        id: `${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
        title: note.title || '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞',
        content: note.content || '',
        createdAt: Date.now(),
        updatedAt: Date.now(),
      };
      if (note.tags) newNote.tags = note.tags;
      if (note.isPinned) newNote.isPinned = note.isPinned;
      return newNote;
    });
    
    schema.notes.push(...notesWithNewIds);
    await chrome.storage.local.set({ [STORAGE_KEY]: schema });
    
    return notesWithNewIds.length;
  } catch (error) {
    console.error('Error importing notes:', error);
    return 0;
  }
}
