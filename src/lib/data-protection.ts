/**
 * @file: data-protection.ts
 * @description: –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ—Ç–µ—Ä–∏
 * @dependencies: Chrome Storage API, types/note, external-backup
 * @created: 2025-10-20
 */

import { Note, StorageSchema } from '@/types/note';
import { syncToIndexedDB, checkAndRestoreFromIndexedDB, initExternalBackups } from './external-backup';

const BACKUP_KEY = 'hidden_notes_backup';
const DELETED_NOTES_KEY = 'hidden_notes_deleted';
const VERSION_HISTORY_KEY = 'hidden_notes_versions';

/**
 * –£—Ä–æ–≤–µ–Ω—å 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
 * –°–æ–∑–¥–∞–µ—Ç snapshot –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
 */
export async function createAutoBackup(): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    const data = await chrome.storage.local.get('hidden_notes');
    const schema = data.hidden_notes as StorageSchema;
    
    if (!schema || !schema.notes || schema.notes.length === 0) {
      return; // –ù–µ—á–µ–≥–æ –±—ç–∫–∞–ø–∏—Ç—å
    }

    // –°–æ–∑–¥–∞–µ–º backup —Å timestamp
    const backup = {
      timestamp: Date.now(),
      data: schema,
      version: 1,
    };

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—ç–∫–∞–ø—ã
    const backupData = await chrome.storage.local.get(BACKUP_KEY);
    const backups = backupData[BACKUP_KEY] || [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±—ç–∫–∞–ø
    backups.push(backup);
    
    // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±—ç–∫–∞–ø–æ–≤ (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è)
    const recentBackups = backups.slice(-10);
    
    await chrome.storage.local.set({ [BACKUP_KEY]: recentBackups });
    
    console.log(`‚úÖ Auto-backup created: ${new Date(backup.timestamp).toLocaleString()}`);
  } catch (error) {
    console.error('‚ùå Auto-backup failed:', error);
  }
}

/**
 * –£—Ä–æ–≤–µ–Ω—å 2: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
 */
export async function restoreFromBackup(backupIndex: number = -1): Promise<boolean> {
  try {
    const backupData = await chrome.storage.local.get(BACKUP_KEY);
    const backups = backupData[BACKUP_KEY] || [];
    
    if (backups.length === 0) {
      console.warn('No backups available');
      return false;
    }
    
    // -1 = –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø, 0 = —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π
    const backup = backupIndex === -1 ? backups[backups.length - 1] : backups[backupIndex];
    
    if (!backup) {
      console.warn('Backup not found');
      return false;
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await chrome.storage.local.set({ hidden_notes: backup.data });
    
    console.log(`‚úÖ Restored from backup: ${new Date(backup.timestamp).toLocaleString()}`);
    return true;
  } catch (error) {
    console.error('‚ùå Restore failed:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
 */
export async function listBackups(): Promise<Array<{
  index: number;
  timestamp: number;
  notesCount: number;
  date: string;
}>> {
  try {
    const backupData = await chrome.storage.local.get(BACKUP_KEY);
    const backups = backupData[BACKUP_KEY] || [];
    
    return backups.map((backup: any, index: number) => ({
      index,
      timestamp: backup.timestamp,
      notesCount: backup.data?.notes?.length || 0,
      date: new Date(backup.timestamp).toLocaleString('ru-RU'),
    }));
  } catch (error) {
    console.error('‚ùå Failed to list backups:', error);
    return [];
  }
}

/**
 * –£—Ä–æ–≤–µ–Ω—å 3: –ö–æ—Ä–∑–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ (soft delete)
 * –ó–∞–º–µ—Ç–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è 30 –¥–Ω–µ–π –ø–µ—Ä–µ–¥ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º
 */
export async function moveToTrash(note: Note): Promise<void> {
  try {
    const deletedData = await chrome.storage.local.get(DELETED_NOTES_KEY);
    const deletedNotes = deletedData[DELETED_NOTES_KEY] || [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω–∏—è
    const trashedNote = {
      ...note,
      deletedAt: Date.now(),
      canRestoreUntil: Date.now() + (30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π
    };
    
    deletedNotes.push(trashedNote);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (> 30 –¥–Ω–µ–π)
    const now = Date.now();
    const validDeleted = deletedNotes.filter((n: any) => n.canRestoreUntil > now);
    
    await chrome.storage.local.set({ [DELETED_NOTES_KEY]: validDeleted });
    
    console.log(`üóëÔ∏è Note moved to trash: "${note.title}"`);
  } catch (error) {
    console.error('‚ùå Failed to move to trash:', error);
  }
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
 */
export async function restoreFromTrash(noteId: string): Promise<Note | null> {
  try {
    const deletedData = await chrome.storage.local.get(DELETED_NOTES_KEY);
    const deletedNotes = deletedData[DELETED_NOTES_KEY] || [];
    
    const noteIndex = deletedNotes.findIndex((n: any) => n.id === noteId);
    if (noteIndex === -1) return null;
    
    const restoredNote = deletedNotes[noteIndex];
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    deletedNotes.splice(noteIndex, 1);
    await chrome.storage.local.set({ [DELETED_NOTES_KEY]: deletedNotes });
    
    // –û—á–∏—â–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω–∏—è
    const { deletedAt, canRestoreUntil, ...cleanNote } = restoredNote;
    
    console.log(`‚ôªÔ∏è Note restored from trash: "${cleanNote.title}"`);
    return cleanNote as Note;
  } catch (error) {
    console.error('‚ùå Failed to restore from trash:', error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
 */
export async function listTrashedNotes(): Promise<Array<Note & {
  deletedAt: number;
  canRestoreUntil: number;
  daysUntilPermanentDelete: number;
}>> {
  try {
    const deletedData = await chrome.storage.local.get(DELETED_NOTES_KEY);
    const deletedNotes = deletedData[DELETED_NOTES_KEY] || [];
    
    const now = Date.now();
    return deletedNotes
      .filter((n: any) => n.canRestoreUntil > now)
      .map((n: any) => ({
        ...n,
        daysUntilPermanentDelete: Math.ceil((n.canRestoreUntil - now) / (24 * 60 * 60 * 1000)),
      }));
  } catch (error) {
    console.error('‚ùå Failed to list trashed notes:', error);
    return [];
  }
}

/**
 * –£—Ä–æ–≤–µ–Ω—å 4: –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ (snapshot –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏)
 * –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤–µ—Ä—Å–∏–π –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–∏
 */
export async function saveNoteVersion(note: Note): Promise<void> {
  try {
    const versionData = await chrome.storage.local.get(VERSION_HISTORY_KEY);
    const allVersions = versionData[VERSION_HISTORY_KEY] || {};
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏
    const noteVersions = allVersions[note.id] || [];
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    const version = {
      ...note,
      versionTimestamp: Date.now(),
    };
    
    noteVersions.push(version);
    
    // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤–µ—Ä—Å–∏–π
    const recentVersions = noteVersions.slice(-5);
    
    allVersions[note.id] = recentVersions;
    
    await chrome.storage.local.set({ [VERSION_HISTORY_KEY]: allVersions });
  } catch (error) {
    console.error('‚ùå Failed to save note version:', error);
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π –∑–∞–º–µ—Ç–∫–∏
 */
export async function getNoteVersions(noteId: string): Promise<Array<Note & { versionTimestamp: number }>> {
  try {
    const versionData = await chrome.storage.local.get(VERSION_HISTORY_KEY);
    const allVersions = versionData[VERSION_HISTORY_KEY] || {};
    return allVersions[noteId] || [];
  } catch (error) {
    console.error('‚ùå Failed to get note versions:', error);
    return [];
  }
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –∑–∞–º–µ—Ç–∫–∏
 */
export async function restoreNoteVersion(noteId: string, versionIndex: number): Promise<Note | null> {
  try {
    const versions = await getNoteVersions(noteId);
    if (versionIndex < 0 || versionIndex >= versions.length) return null;
    
    const version = versions[versionIndex];
    if (!version) return null;
    
    const { versionTimestamp, ...cleanNote } = version;
    
    console.log(`‚ôªÔ∏è Restored version from ${new Date(versionTimestamp).toLocaleString()}`);
    return cleanNote as Note;
  } catch (error) {
    console.error('‚ùå Failed to restore version:', error);
    return null;
  }
}

/**
 * –£—Ä–æ–≤–µ–Ω—å 5: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏/–∑–∞–ø–∏—Å–∏
 */
export function validateNote(note: any): note is Note {
  if (!note || typeof note !== 'object') return false;
  if (typeof note.id !== 'string' || !note.id) return false;
  if (typeof note.title !== 'string') return false;
  if (typeof note.content !== 'string') return false;
  if (typeof note.createdAt !== 'number') return false;
  if (typeof note.updatedAt !== 'number') return false;
  
  return true;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö
 */
export function validateStorageSchema(data: any): data is StorageSchema {
  if (!data || typeof data !== 'object') return false;
  if (!Array.isArray(data.notes)) return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–º–µ—Ç–∫—É
  return data.notes.every((note: any) => validateNote(note));
}

/**
 * –£—Ä–æ–≤–µ–Ω—å 6: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
 */
export async function safeGetAllNotes(): Promise<Note[]> {
  try {
    const data = await chrome.storage.local.get('hidden_notes');
    const schema = data.hidden_notes;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!validateStorageSchema(schema)) {
      console.warn('‚ö†Ô∏è Invalid storage schema detected, attempting recovery...');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
      const restored = await restoreFromBackup();
      if (restored) {
        const restoredData = await chrome.storage.local.get('hidden_notes');
        return restoredData.hidden_notes?.notes || [];
      }
      
      return [];
    }
    
    return schema.notes;
  } catch (error) {
    console.error('‚ùå Failed to read notes, attempting recovery...', error);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
    const restored = await restoreFromBackup();
    if (restored) {
      const restoredData = await chrome.storage.local.get('hidden_notes');
      return restoredData.hidden_notes?.notes || [];
    }
    
    return [];
  }
}

/**
 * –£—Ä–æ–≤–µ–Ω—å 7: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
 */
export async function verifyDataIntegrity(): Promise<{
  isValid: boolean;
  errors: string[];
  warnings: string[];
}> {
  const errors: string[] = [];
  const warnings: string[] = [];
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const data = await chrome.storage.local.get('hidden_notes');
    const schema = data.hidden_notes;
    
    if (!schema) {
      errors.push('Main storage is empty');
    } else {
      if (!validateStorageSchema(schema)) {
        errors.push('Storage schema validation failed');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ID
      const ids = new Set();
      schema.notes?.forEach((note: Note) => {
        if (ids.has(note.id)) {
          errors.push(`Duplicate note ID found: ${note.id}`);
        }
        ids.add(note.id);
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ timestamps
      schema.notes?.forEach((note: Note) => {
        if (note.createdAt > Date.now()) {
          warnings.push(`Note "${note.title}" has future createdAt timestamp`);
        }
        if (note.updatedAt < note.createdAt) {
          warnings.push(`Note "${note.title}" has updatedAt before createdAt`);
        }
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±—ç–∫–∞–ø–æ–≤
    const backupData = await chrome.storage.local.get(BACKUP_KEY);
    const backups = backupData[BACKUP_KEY] || [];
    if (backups.length === 0) {
      warnings.push('No backups available');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–≤–æ—Ç—ã
    const bytesInUse = await chrome.storage.local.getBytesInUse(null);
    const totalBytes = chrome.storage.local.QUOTA_BYTES || 10485760;
    const percentUsed = (bytesInUse / totalBytes) * 100;
    
    if (percentUsed > 90) {
      errors.push(`Storage critically full: ${percentUsed.toFixed(1)}%`);
    } else if (percentUsed > 80) {
      warnings.push(`Storage usage high: ${percentUsed.toFixed(1)}%`);
    }
    
  } catch (error) {
    errors.push(`Integrity check failed: ${error}`);
  }
  
  return {
    isValid: errors.length === 0,
    errors,
    warnings,
  };
}

/**
 * –£—Ä–æ–≤–µ–Ω—å 8: Emergency Export (—ç–∫—Å–ø–æ—Ä—Ç –≤ localStorage –∫–∞–∫ fallback)
 */
export async function emergencyExportToLocalStorage(): Promise<void> {
  try {
    const data = await chrome.storage.local.get('hidden_notes');
    const schema = data.hidden_notes;
    
    if (schema) {
      localStorage.setItem('hidden_notes_emergency_backup', JSON.stringify({
        data: schema,
        timestamp: Date.now(),
        source: 'chrome.storage.local',
      }));
      
      console.log('üÜò Emergency backup saved to localStorage');
    }
  } catch (error) {
    console.error('‚ùå Emergency export failed:', error);
  }
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ emergency backup
 */
export async function restoreFromEmergencyBackup(): Promise<boolean> {
  try {
    const emergencyData = localStorage.getItem('hidden_notes_emergency_backup');
    if (!emergencyData) {
      console.warn('No emergency backup found');
      return false;
    }
    
    const parsed = JSON.parse(emergencyData);
    
    if (validateStorageSchema(parsed.data)) {
      await chrome.storage.local.set({ hidden_notes: parsed.data });
      console.log('‚úÖ Restored from emergency backup');
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå Emergency restore failed:', error);
    return false;
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
 */
export async function initDataProtection(): Promise<void> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º IndexedDB –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
  const restored = await checkAndRestoreFromIndexedDB();
  if (restored) {
    console.log('‚úÖ Data auto-restored from IndexedDB (extension was reinstalled)');
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –±—ç–∫–∞–ø—ã (IndexedDB)
  initExternalBackups();
  
  // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –±—ç–∫–∞–ø —Å—Ä–∞–∑—É
  createAutoBackup();
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  setInterval(() => {
    createAutoBackup();
  }, 5 * 60 * 1000);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å IndexedDB –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
  setInterval(() => {
    syncToIndexedDB();
  }, 2 * 60 * 1000);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
  setInterval(async () => {
    const result = await verifyDataIntegrity();
    
    if (!result.isValid) {
      console.error('‚ö†Ô∏è Data integrity issues detected:', result.errors);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
      if (result.errors.some(e => e.includes('validation failed'))) {
        console.log('üîÑ Attempting auto-recovery...');
        const backupRestored = await restoreFromBackup();
        
        // –ï—Å–ª–∏ –±—ç–∫–∞–ø –Ω–µ –ø–æ–º–æ–≥, –ø—Ä–æ–±—É–µ–º IndexedDB
        if (!backupRestored) {
          console.log('üîÑ Attempting IndexedDB recovery...');
          await checkAndRestoreFromIndexedDB();
        }
      }
    }
    
    if (result.warnings.length > 0) {
      console.warn('‚ö†Ô∏è Data warnings:', result.warnings);
    }
  }, 10 * 60 * 1000);
  
  // Emergency backup –≤ localStorage –∫–∞–∂–¥—ã–π —á–∞—Å
  setInterval(() => {
    emergencyExportToLocalStorage();
  }, 60 * 60 * 1000);
  
  console.log('üõ°Ô∏è Data Protection System initialized with IndexedDB persistence');
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤–∫–ª—é—á–∞—è –±—ç–∫–∞–ø—ã –∏ –∏—Å—Ç–æ—Ä–∏—é)
 */
export async function exportProtectedData(): Promise<string> {
  try {
    const mainData = await chrome.storage.local.get('hidden_notes');
    const backupData = await chrome.storage.local.get(BACKUP_KEY);
    const deletedData = await chrome.storage.local.get(DELETED_NOTES_KEY);
    const versionData = await chrome.storage.local.get(VERSION_HISTORY_KEY);
    
    const fullExport = {
      exportedAt: Date.now(),
      exportedAtDate: new Date().toISOString(),
      main: mainData.hidden_notes,
      backups: backupData[BACKUP_KEY] || [],
      deleted: deletedData[DELETED_NOTES_KEY] || [],
      versions: versionData[VERSION_HISTORY_KEY] || {},
      metadata: {
        totalNotes: mainData.hidden_notes?.notes?.length || 0,
        totalBackups: (backupData[BACKUP_KEY] || []).length,
        totalDeleted: (deletedData[DELETED_NOTES_KEY] || []).length,
      },
    };
    
    return JSON.stringify(fullExport, null, 2);
  } catch (error) {
    console.error('‚ùå Protected export failed:', error);
    return '{}';
  }
}

