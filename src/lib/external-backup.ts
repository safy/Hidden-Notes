/**
 * @file: external-backup.ts
 * @description: –°–∏—Å—Ç–µ–º–∞ –≤–Ω–µ—à–Ω–∏—Ö –±—ç–∫–∞–ø–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 * @dependencies: Chrome Storage API, IndexedDB API, types/note
 * @created: 2025-10-20
 */

import { StorageSchema } from '@/types/note';

const INDEXEDDB_NAME = 'HiddenNotesDB';
const INDEXEDDB_VERSION = 1;
const STORE_NAME = 'backups';

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexedDB (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
 */
function openIndexedDB(): Promise<IDBDatabase> {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(INDEXEDDB_NAME, INDEXEDDB_VERSION);
    
    request.onerror = () => {
      reject(new Error('Failed to open IndexedDB'));
    };
    
    request.onsuccess = () => {
      resolve(request.result);
    };
    
    request.onupgradeneeded = (event) => {
      const db = (event.target as IDBOpenDBRequest).result;
      
      // –°–æ–∑–¥–∞–µ–º object store –¥–ª—è –±—ç–∫–∞–ø–æ–≤
      if (!db.objectStoreNames.contains(STORE_NAME)) {
        const store = db.createObjectStore(STORE_NAME, { 
          keyPath: 'id',
          autoIncrement: false 
        });
        
        // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        store.createIndex('timestamp', 'timestamp', { unique: false });
        store.createIndex('type', 'type', { unique: false });
      }
    };
  });
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—ç–∫–∞–ø –≤ IndexedDB
 * IndexedDB –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–∞–∂–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è!
 */
export async function saveToIndexedDB(schema: StorageSchema): Promise<void> {
  try {
    const db = await openIndexedDB();
    
    const backup = {
      id: `backup-${Date.now()}`,
      timestamp: Date.now(),
      type: 'auto',
      data: schema,
      notesCount: schema.notes?.length || 0,
      version: 1,
    };
    
    const transaction = db.transaction([STORE_NAME], 'readwrite');
    const store = transaction.objectStore(STORE_NAME);
    
    store.add(backup);
    
    await new Promise<void>((resolve, reject) => {
      transaction.oncomplete = () => {
        console.log('üíæ Saved to IndexedDB:', new Date(backup.timestamp).toLocaleString());
        resolve();
      };
      transaction.onerror = () => reject(transaction.error);
    });
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)
    await cleanupOldIndexedDBBackups(db);
    
    db.close();
  } catch (error) {
    console.error('‚ùå Failed to save to IndexedDB:', error);
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ –≤ IndexedDB (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)
 */
async function cleanupOldIndexedDBBackups(db: IDBDatabase): Promise<void> {
  try {
    const transaction = db.transaction([STORE_NAME], 'readwrite');
    const store = transaction.objectStore(STORE_NAME);
    const index = store.index('timestamp');
    
    const allBackups: any[] = [];
    const request = index.openCursor();
    
    request.onsuccess = (event) => {
      const cursor = (event.target as IDBRequest).result;
      if (cursor) {
        allBackups.push(cursor.value);
        cursor.continue();
      } else {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
        allBackups.sort((a, b) => b.timestamp - a.timestamp);
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20
        if (allBackups.length > 20) {
          const toDelete = allBackups.slice(20);
          toDelete.forEach(backup => {
            store.delete(backup.id);
          });
          console.log(`üßπ Cleaned ${toDelete.length} old IndexedDB backups`);
        }
      }
    };
  } catch (error) {
    console.error('‚ùå Failed to cleanup IndexedDB:', error);
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±—ç–∫–∞–ø—ã –∏–∑ IndexedDB
 */
export async function listIndexedDBBackups(): Promise<Array<{
  id: string;
  timestamp: number;
  date: string;
  notesCount: number;
  type: string;
}>> {
  try {
    const db = await openIndexedDB();
    const transaction = db.transaction([STORE_NAME], 'readonly');
    const store = transaction.objectStore(STORE_NAME);
    
    return new Promise((resolve, reject) => {
      const request = store.getAll();
      
      request.onsuccess = () => {
        const backups = request.result || [];
        const formatted = backups.map((backup: any) => ({
          id: backup.id,
          timestamp: backup.timestamp,
          date: new Date(backup.timestamp).toLocaleString('ru-RU'),
          notesCount: backup.notesCount,
          type: backup.type,
        }));
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
        formatted.sort((a, b) => b.timestamp - a.timestamp);
        
        db.close();
        resolve(formatted);
      };
      
      request.onerror = () => {
        db.close();
        reject(request.error);
      };
    });
  } catch (error) {
    console.error('‚ùå Failed to list IndexedDB backups:', error);
    return [];
  }
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ IndexedDB –±—ç–∫–∞–ø–∞
 */
export async function restoreFromIndexedDB(backupId: string): Promise<StorageSchema | null> {
  try {
    const db = await openIndexedDB();
    const transaction = db.transaction([STORE_NAME], 'readonly');
    const store = transaction.objectStore(STORE_NAME);
    
    return new Promise((resolve, reject) => {
      const request = store.get(backupId);
      
      request.onsuccess = () => {
        const backup = request.result;
        db.close();
        
        if (backup && backup.data) {
          console.log('‚ôªÔ∏è Restored from IndexedDB:', new Date(backup.timestamp).toLocaleString());
          resolve(backup.data);
        } else {
          resolve(null);
        }
      };
      
      request.onerror = () => {
        db.close();
        reject(request.error);
      };
    });
  } catch (error) {
    console.error('‚ùå Failed to restore from IndexedDB:', error);
    return null;
  }
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø –∏–∑ IndexedDB
 */
export async function restoreLatestIndexedDBBackup(): Promise<StorageSchema | null> {
  try {
    const backups = await listIndexedDBBackups();
    if (backups.length === 0) return null;
    
    const latest = backups[0]; // –£–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    if (!latest) return null;
    
    return await restoreFromIndexedDB(latest.id);
  } catch (error) {
    console.error('‚ùå Failed to restore latest IndexedDB backup:', error);
    return null;
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –≤ downloadable —Ñ–∞–π–ª (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ)
 */
export async function downloadBackupFile(schema: StorageSchema): Promise<void> {
  try {
    const backup = {
      exportedAt: Date.now(),
      exportedAtDate: new Date().toISOString(),
      source: 'Hidden Notes Extension',
      version: 1,
      data: schema,
      metadata: {
        notesCount: schema.notes?.length || 0,
        hasSettings: !!schema.settings,
      },
    };
    
    const jsonData = JSON.stringify(backup, null, 2);
    const blob = new Blob([jsonData], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    
    const timestamp = new Date().toISOString().replace(/:/g, '-').split('.')[0];
    link.download = `hidden-notes-full-backup-${timestamp}.json`;
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    console.log('üì• Backup file downloaded');
  } catch (error) {
    console.error('‚ùå Failed to download backup:', error);
  }
}

/**
 * –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞
 */
export async function importBackupFile(fileContent: string): Promise<StorageSchema | null> {
  try {
    const parsed = JSON.parse(fileContent);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if (!parsed.data || !parsed.data.notes || !Array.isArray(parsed.data.notes)) {
      throw new Error('Invalid backup file format');
    }
    
    console.log('üì§ Backup file imported, notes:', parsed.data.notes.length);
    return parsed.data as StorageSchema;
  } catch (error) {
    console.error('‚ùå Failed to import backup file:', error);
    return null;
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å IndexedDB –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */
export async function syncToIndexedDB(): Promise<void> {
  try {
    const data = await chrome.storage.local.get('hidden_notes');
    const schema = data.hidden_notes as StorageSchema;
    
    if (schema) {
      await saveToIndexedDB(schema);
    }
  } catch (error) {
    console.error('‚ùå IndexedDB sync failed:', error);
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö –±—ç–∫–∞–ø–æ–≤
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å IndexedDB
 */
export function initExternalBackups(): void {
  // –ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ä–∞–∑—É
  syncToIndexedDB();
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã (—á–∞—â–µ —á–µ–º –æ–±—ã—á–Ω—ã–µ –±—ç–∫–∞–ø—ã)
  setInterval(() => {
    syncToIndexedDB();
  }, 2 * 60 * 1000);
  
  console.log('üåê External Backup System initialized (IndexedDB)');
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ IndexedDB –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
 * –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ IndexedDB –Ω–æ –Ω–µ—Ç –≤ chrome.storage - –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
 */
export async function checkAndRestoreFromIndexedDB(): Promise<boolean> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º chrome.storage
    const chromeData = await chrome.storage.local.get('hidden_notes');
    const chromeSchema = chromeData.hidden_notes as StorageSchema;
    
    // –ï—Å–ª–∏ –≤ chrome.storage –ø—É—Å—Ç–æ –∏–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
    const chromeNotesCount = chromeSchema?.notes?.length || 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º IndexedDB
    const indexedDBBackups = await listIndexedDBBackups();
    
    if (indexedDBBackups.length === 0) {
      console.log('‚ÑπÔ∏è No IndexedDB backups available');
      return false;
    }
    
    const latestBackup = indexedDBBackups[0];
    
    // –ï—Å–ª–∏ IndexedDB —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (!latestBackup) return false;
    
    if (latestBackup.notesCount > chromeNotesCount) {
      console.warn(`‚ö†Ô∏è IndexedDB has more notes (${latestBackup.notesCount}) than chrome.storage (${chromeNotesCount})`);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ chrome.storage –ø—É—Å—Ç
      if (chromeNotesCount === 0) {
        const restored = await restoreLatestIndexedDBBackup();
        if (restored) {
          await chrome.storage.local.set({ hidden_notes: restored });
          console.log('‚úÖ Auto-restored from IndexedDB');
          return true;
        }
      }
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå IndexedDB check failed:', error);
    return false;
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –≤ –æ–±–ª–∞–∫–æ (–¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π)
 * –°–µ–π—á–∞—Å —Ç–æ–ª—å–∫–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
export interface CloudBackupProvider {
  name: string;
  upload: (data: string) => Promise<string>; // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL
  download: (url: string) => Promise<string>; // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON
  list: () => Promise<Array<{ url: string; timestamp: number }>>;
}

/**
 * Google Drive backup (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è v2.0)
 */
export const GoogleDriveBackup: CloudBackupProvider = {
  name: 'Google Drive',
  upload: async (_data: string) => {
    throw new Error('Google Drive backup will be available in v2.0.0 Pro');
  },
  download: async (_url: string) => {
    throw new Error('Google Drive backup will be available in v2.0.0 Pro');
  },
  list: async () => {
    throw new Error('Google Drive backup will be available in v2.0.0 Pro');
  },
};

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–∞—è –≤–Ω–µ—à–Ω–∏–µ –±—ç–∫–∞–ø—ã
 */
export async function exportAllBackupSources(): Promise<{
  chromeStorage: StorageSchema | null;
  indexedDB: any[];
  localStorage: any;
  timestamp: number;
}> {
  try {
    // Chrome Storage
    const chromeData = await chrome.storage.local.get('hidden_notes');
    const chromeSchema = chromeData.hidden_notes as StorageSchema;
    
    // IndexedDB
    const indexedDBBackups = await listIndexedDBBackups();
    
    // localStorage emergency backup
    const localStorageBackup = localStorage.getItem('hidden_notes_emergency_backup');
    const parsedLocalStorage = localStorageBackup ? JSON.parse(localStorageBackup) : null;
    
    return {
      chromeStorage: chromeSchema || null,
      indexedDB: indexedDBBackups,
      localStorage: parsedLocalStorage,
      timestamp: Date.now(),
    };
  } catch (error) {
    console.error('‚ùå Failed to export all sources:', error);
    return {
      chromeStorage: null,
      indexedDB: [],
      localStorage: null,
      timestamp: Date.now(),
    };
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
 */
export async function generateRecoveryLink(): Promise<string> {
  try {
    const data = await chrome.storage.local.get('hidden_notes');
    const schema = data.hidden_notes as StorageSchema;
    
    if (!schema) {
      throw new Error('No data to create recovery link');
    }
    
    // –°–∂–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å LZString compression –ø–æ–∑–∂–µ)
    const jsonData = JSON.stringify(schema);
    const base64Data = btoa(unescape(encodeURIComponent(jsonData)));
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º recovery URL (–¥–ª—è GitHub Pages –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞)
    const recoveryUrl = `https://your-domain.com/recover?data=${base64Data}`;
    
    console.log('üîó Recovery link generated');
    return recoveryUrl;
  } catch (error) {
    console.error('‚ùå Failed to generate recovery link:', error);
    return '';
  }
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ recovery link
 */
export async function restoreFromRecoveryLink(recoveryUrl: string): Promise<StorageSchema | null> {
  try {
    const url = new URL(recoveryUrl);
    const base64Data = url.searchParams.get('data');
    
    if (!base64Data) {
      throw new Error('Invalid recovery link');
    }
    
    const jsonData = decodeURIComponent(escape(atob(base64Data)));
    const schema = JSON.parse(jsonData) as StorageSchema;
    
    console.log('‚úÖ Restored from recovery link');
    return schema;
  } catch (error) {
    console.error('‚ùå Failed to restore from recovery link:', error);
    return null;
  }
}

/**
 * Webhook –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ç–∫–∞–ø–æ–≤ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
export async function sendWebhookBackup(webhookUrl: string, schema: StorageSchema): Promise<boolean> {
  try {
    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        timestamp: Date.now(),
        data: schema,
        source: 'Hidden Notes Extension',
        version: 1,
      }),
    });
    
    if (!response.ok) {
      throw new Error(`Webhook failed: ${response.status}`);
    }
    
    console.log('üì° Webhook backup sent successfully');
    return true;
  } catch (error) {
    console.error('‚ùå Webhook backup failed:', error);
    return false;
  }
}

/**
 * Email backup (–æ—Ç–ø—Ä–∞–≤–∫–∞ –±—ç–∫–∞–ø–∞ –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç mailto: –ø—Ä–æ—Ç–æ–∫–æ–ª
 */
export async function emailBackup(schema: StorageSchema, userEmail: string): Promise<void> {
  try {
    const jsonData = JSON.stringify(schema, null, 2);
    const timestamp = new Date().toISOString();
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: mailto –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä (~2000 —Å–∏–º–≤–æ–ª–æ–≤)
    // –î–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å attachment API
    if (jsonData.length > 2000) {
      console.warn('‚ö†Ô∏è Data too large for email, use download instead');
      await downloadBackupFile(schema);
      return;
    }
    
    const subject = `Hidden Notes Backup - ${timestamp}`;
    const body = `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –∏–∑ Hidden Notes Extension.\n\n–î–∞—Ç–∞: ${timestamp}\n–ó–∞–º–µ—Ç–æ–∫: ${schema.notes?.length || 0}\n\n–î–∞–Ω–Ω—ã–µ:\n${jsonData}`;
    
    const mailtoLink = `mailto:${userEmail}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    
    window.open(mailtoLink, '_blank');
    console.log('üìß Email backup initiated');
  } catch (error) {
    console.error('‚ùå Email backup failed:', error);
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ–±–ª–∞–∫–æ —á–µ—Ä–µ–∑ Web API (–¥–ª—è v2.0)
 */
export interface CloudStorageConfig {
  provider: 'google-drive' | 'dropbox' | 'onedrive';
  accessToken: string;
  refreshToken?: string;
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
export async function uploadToCloud(_config: CloudStorageConfig, _schema: StorageSchema): Promise<string> {
  throw new Error('Cloud backup will be available in v2.0.0 Pro');
}

export async function downloadFromCloud(_config: CloudStorageConfig, _fileId: string): Promise<StorageSchema> {
  throw new Error('Cloud backup will be available in v2.0.0 Pro');
}

