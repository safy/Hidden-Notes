import { test, expect, chromium, type BrowserContext } from '@playwright/test';
import path from 'path';
import { fileURLToPath } from 'url';

/**
 * üß™ Test Suite: Editor Functionality
 * 
 * üìå –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò –° DEVTOOLS:
 * 
 * 1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å –æ–ø—Ü–∏–µ–π --debug:
 *    npm run test:debug
 * 
 * 2. –û—Ç–∫—Ä–æ–µ—Ç—Å—è Playwright Inspector
 * 
 * 3. –í –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ:
 *    - –ö–Ω–æ–ø–∫–∞ "Pause" - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É
 *    - –ö–Ω–æ–ø–∫–∞ "Step" - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —à–∞–≥
 *    - –ö–Ω–æ–ø–∫–∞ "Resume" - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
 *    - –ë—Ä–∞—É–∑–µ—Ä –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * 
 * 4. –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Chrome DevTools:
 *    - –í–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ F12
 *    - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Application ‚Üí Storage ‚Üí Extension Storage
 *    - –°–º–æ—Ç—Ä–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 * 
 * 5. –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ:
 *    DEBUG=pw:api npm run test:debug
 * 
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 */

import { test, expect } from '@playwright/test';

test.describe('Editor Tests', () => {
  test('Example test', async ({ page }) => {
    // üìå DEBUG: –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–∂–º–∏—Ç–µ F12 –¥–ª—è DevTools
    // await page.pause(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –ø–∞—É–∑—ã –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
    
    // –í–∞—à–∏ —Ç–µ—Å—Ç—ã...
  });
});

/**
 * –¢–µ—Å—Ç—ã –¥–ª—è Hidden Notes Editor
 * 
 * –≠—Ç–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:
 * - –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 * - –û—Ç–∫—Ä—ã—Ç–∏–µ Side Panel
 * - –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
 * - –†–∞–±–æ—Ç—É toolbar
 */

// ES –º–æ–¥—É–ª—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

let context: BrowserContext;
let extensionId: string;
const pathToExtension = path.join(__dirname, '../dist');

test.beforeAll(async () => {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
  context = await chromium.launchPersistentContext('', {
    headless: false,
    args: [
      `--disable-extensions-except=${pathToExtension}`,
      `--load-extension=${pathToExtension}`,
      '--no-sandbox',
      '--disable-setuid-sandbox',
    ],
  });

  // –î–∞—ë–º –≤—Ä–µ–º—è –±—Ä–∞—É–∑–µ—Ä—É –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑ service worker
  let [background] = context.serviceWorkers();
  if (!background) {
    try {
      background = await context.waitForEvent('serviceworker', { timeout: 5000 });
    } catch (error) {
      console.log('Service worker not found, trying alternative method...');
    }
  }

  // –ï—Å–ª–∏ service worker –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ –Ω–µ–≥–æ
  if (background) {
    const backgroundUrl = background.url();
    console.log(`Background URL: ${backgroundUrl}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL service worker
    const urlParts = backgroundUrl.split('/');
    extensionId = urlParts[2]; // chrome-extension://ID/service-worker-loader.js
    
    console.log(`Extension ID from service worker: ${extensionId}`);
  }
  
  // –ï—Å–ª–∏ ID –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
  if (!extensionId || extensionId.length !== 32) {
    console.log('Trying alternative method to get extension ID...');
    const extensionsPage = await context.newPage();
    await extensionsPage.goto('chrome://extensions/');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await extensionsPage.waitForLoadState('networkidle');
    
    // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const devModeToggle = extensionsPage.locator('extensions-manager').locator('#devMode');
    const isDevModeEnabled = await devModeToggle.evaluate((el: HTMLInputElement) => el.checked);
    if (!isDevModeEnabled) {
      await devModeToggle.click();
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    // –ò—â–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
    const extensionCard = extensionsPage.locator('extensions-item').filter({ hasText: 'Hidden Notes' });
    await expect(extensionCard).toBeVisible({ timeout: 10000 });
    
    // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ id —ç–ª–µ–º–µ–Ω—Ç–∞
    const cardId = await extensionCard.getAttribute('id');
    if (cardId) {
      extensionId = cardId;
      console.log(`Extension ID from page: ${extensionId}`);
    }
    
    await extensionsPage.close();
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ ID, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if (!extensionId || extensionId.length !== 32) {
      throw new Error(`Failed to get extension ID. Got: ${extensionId}`);
    }
  }
});

test.afterAll(async () => {
  await context.close();
});

/**
 * Helper function –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Side Panel –≤ —Ç–µ—Å—Ç–∞—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç service worker context –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
async function openSidePanel() {
  // –ü–æ–ª—É—á–∞–µ–º URL Side Panel
  const sidePanelUrl = `chrome-extension://${extensionId}/src/sidepanel/index.html`;
  
  // –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ service worker –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
  let [serviceWorker] = context.serviceWorkers();
  
  if (serviceWorker) {
    try {
      // –°–æ–∑–¥–∞–µ–º Promise –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∫–ª–∞–¥–∫–∏
      const pagePromise = context.waitForEvent('page', { timeout: 10000 });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º service worker –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å URL —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      await serviceWorker.evaluate(async (url) => {
        await chrome.tabs.create({ url, active: true });
      }, sidePanelUrl);
      
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const page = await pagePromise;
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
      await page.waitForLoadState('load');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—É—Å—Ç—ã–µ –≤–∫–ª–∞–¥–∫–∏ (about:blank)
      const allPages = context.pages();
      for (const p of allPages) {
        if (p !== page && p.url() === 'about:blank') {
          await p.close();
        }
      }
      
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ñ–æ–∫—É—Å –Ω–∞ –Ω–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await page.bringToFront();
      
      return page;
    } catch (error) {
      console.log('Service worker method failed, using alternative...');
    }
  }
  
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–ø—Ä—è–º—É—é
  // –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ service worker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  const page = await context.newPage();
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ extension URL –Ω–∞–ø—Ä—è–º—É—é
  await page.goto(sidePanelUrl, { waitUntil: 'load' });
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –≤–∫–ª–∞–¥–∫–∏
  const allPages = context.pages();
  for (const p of allPages) {
    if (p !== page && p.url() === 'about:blank') {
      await p.close();
    }
  }
  
  await page.bringToFront();
  
  return page;
}

/**
 * Helper function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
 */
async function createNewNote(page: any) {
  // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ (–ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ —Å "+")
  const createButton = page.locator('button').first();
  
  // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
  await createButton.click();
  
  // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  await page.waitForTimeout(2000);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ—è–≤–∏–ª—Å—è
  const editor = page.locator('.ProseMirror').first();
  await editor.waitFor({ state: 'visible', timeout: 5000 });
  
  return editor;
}

test.describe('Hidden Notes Extension', () => {
  
  test('–¥–æ–ª–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ', async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ extension ID –ø–æ–ª—É—á–µ–Ω
    expect(extensionId).toBeDefined();
    expect(extensionId).not.toBe('');
    expect(extensionId.length).toBeGreaterThan(10);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (chrome extension ID)
    expect(extensionId).toMatch(/^[a-z]{32}$/);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    const extensionsPage = await context.newPage();
    await extensionsPage.goto('chrome://extensions/');
    
    // –ò—â–µ–º –Ω–∞—à–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
    const extensionElement = extensionsPage.locator('extensions-item').filter({ hasText: 'Hidden Notes' });
    await expect(extensionElement).toBeVisible({ timeout: 10000 });
    
    await extensionsPage.close();
  });

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å—Å—è Side Panel', async () => {
    const page = await openSidePanel();
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    expect(await page.title()).toContain('Hidden Notes');
    
    await page.close();
  });

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', async () => {
    const page = await openSidePanel();
    await page.waitForLoadState('networkidle');
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è root —ç–ª–µ–º–µ–Ω—Ç–∞
    const root = page.locator('#root');
    await expect(root).toBeVisible({ timeout: 10000 });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    // Sidebar
    const sidebar = page.locator('[data-testid="sidebar"], .sidebar, aside');
    await expect(sidebar.first()).toBeVisible({ timeout: 5000 });
    
    // Editor Area
    const editor = page.locator('[data-testid="editor"], .editor, .ProseMirror');
    await expect(editor.first()).toBeVisible({ timeout: 5000 });
    
    await page.close();
  });

  test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å toolbar', async () => {
    const page = await openSidePanel();
    await page.waitForLoadState('networkidle');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã–ª—Å—è —Ä–µ–¥–∞–∫—Ç–æ—Ä
    await createNewNote(page);
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ toolbar
    await page.waitForTimeout(1000);
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ toolbar (Bold, Italic –∏ —Ç.–¥.)
    const boldButton = page.locator('button[title="–ñ–∏—Ä–Ω—ã–π"]');
    const italicButton = page.locator('button[title="–ö—É—Ä—Å–∏–≤"]');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∏–º—ã
    await expect(boldButton).toBeVisible({ timeout: 5000 });
    await expect(italicButton).toBeVisible({ timeout: 5000 });
    
    await page.close();
  });

  test('–¥–æ–ª–∂–µ–Ω –≤–≤–æ–¥–∏—Ç—å—Å—è —Ç–µ–∫—Å—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä', async () => {
    const page = await openSidePanel();
    await page.waitForLoadState('networkidle');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
    const editor = await createNewNote(page);
    
    // –ö–ª–∏–∫–∞–µ–º –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
    await editor.click();
    
    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    await editor.type('Hello World from Playwright!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –ø–æ—è–≤–∏–ª—Å—è
    await expect(editor).toContainText('Hello World from Playwright!');
    
    await page.close();
  });

  test('–¥–æ–ª–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bold', async () => {
    const page = await openSidePanel();
    await page.waitForLoadState('networkidle');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
    const editor = await createNewNote(page);
    
    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    await editor.click();
    await editor.type('Test Bold');
    
    // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç (Ctrl+A)
    await page.keyboard.press('Control+A');
    
    // –ù–∞–∂–∏–º–∞–µ–º Bold (Ctrl+B)
    await page.keyboard.press('Control+B');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç —Å—Ç–∞–ª –∂–∏—Ä–Ω—ã–º
    const strongText = editor.locator('strong, b');
    await expect(strongText).toContainText('Test Bold');
    
    await page.close();
  });

  test('–¥–æ–ª–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Italic', async () => {
    const page = await openSidePanel();
    await page.waitForLoadState('networkidle');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
    const editor = await createNewNote(page);
    
    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    await editor.click();
    await editor.type('Test Italic');
    
    // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç (Ctrl+A)
    await page.keyboard.press('Control+A');
    
    // –ù–∞–∂–∏–º–∞–µ–º Italic (Ctrl+I)
    await page.keyboard.press('Control+I');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç —Å—Ç–∞–ª –∫—É—Ä—Å–∏–≤–Ω—ã–º
    const emText = editor.locator('em, i');
    await expect(emText).toContainText('Test Italic');
    
    await page.close();
  });

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1', async () => {
    const page = await openSidePanel();
    await page.waitForLoadState('networkidle');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
    const editor = await createNewNote(page);
    
    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    await editor.click();
    await editor.type('Heading 1');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º H1 (Ctrl+Alt+1)
    await page.keyboard.press('Control+Alt+Digit1');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª—Å—è H1
    const h1 = editor.locator('h1');
    await expect(h1).toContainText('Heading 1');
    
    await page.close();
  });

  test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å Undo/Redo', async () => {
    const page = await openSidePanel();
    await page.waitForLoadState('networkidle');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
    const editor = await createNewNote(page);
    
    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    await editor.click();
    await editor.type('Test Undo');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –µ—Å—Ç—å
    await expect(editor).toContainText('Test Undo');
    
    // –û—Ç–º–µ–Ω—è–µ–º (Ctrl+Z)
    await page.keyboard.press('Control+Z');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –∏—Å—á–µ–∑
    await expect(editor).not.toContainText('Test Undo');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º (Ctrl+Y)
    await page.keyboard.press('Control+Y');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –≤–µ—Ä–Ω—É–ª—Å—è
    await expect(editor).toContainText('Test Undo');
    
    await page.close();
  });

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è Bullet List', async () => {
    const page = await openSidePanel();
    await page.waitForLoadState('networkidle');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
    const editor = await createNewNote(page);
    
    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    await editor.click();
    await editor.type('List item 1');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º Bullet List (Ctrl+Shift+8)
    await page.keyboard.press('Control+Shift+Digit8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª—Å—è ul
    const ul = editor.locator('ul');
    await expect(ul).toBeVisible();
    await expect(ul.locator('li')).toContainText('List item 1');
    
    await page.close();
  });
});

