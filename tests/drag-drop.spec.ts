/**
 * @file: drag-drop.spec.ts
 * @description: E2E —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ drag & drop –±–ª–æ–∫–æ–≤
 * @created: 2025-10-19
 */

import { test, expect } from '@playwright/test';

test.describe('Drag & Drop Blocks', () => {
  test.beforeEach(async ({ page }) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    await page.goto('chrome-extension://chrome-extension-id/sidepanel/index.html', { waitUntil: 'load' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    await page.waitForSelector('.ProseMirror', { timeout: 5000 }).catch(() => {
      console.log('‚ö†Ô∏è ProseMirror not found, proceeding anyway');
    });
  });

  test('Drag handle should appear on hover', async ({ page }) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const editorContent = `<p>Block 1</p><p>Block 2</p><p>Block 3</p>`;
    await page.evaluate((content) => {
      const editor = (window as any).__editor;
      if (editor?.commands?.setContent) {
        editor.commands.setContent(content);
      }
    }, editorContent);

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    await page.waitForTimeout(500);

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
    const firstP = await page.$('.ProseMirror p');
    if (!firstP) {
      console.log('‚ö†Ô∏è Paragraph not found');
      return;
    }

    // –ù–∞–≤–æ–¥–∏–º –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ
    await firstP.hover();
    await page.waitForTimeout(300);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ::before —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º—ã–π (drag handle)
    const isHandleVisible = await page.evaluate(() => {
      const p = document.querySelector('.ProseMirror p');
      if (!p) return false;
      const styles = window.getComputedStyle(p, '::before');
      return styles.opacity === '1' && styles.content.includes('‚ãÆ');
    });

    expect(isHandleVisible).toBe(true);
    console.log('‚úÖ Drag handle visible on hover');
  });

  test('Block should be draggable', async ({ page }) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    await page.evaluate(() => {
      const editor = (window as any).__editor;
      if (editor?.commands?.setContent) {
        editor.commands.setContent('<p>Block 1</p><p>Block 2</p><p>Block 3</p>');
      }
    });

    await page.waitForTimeout(500);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    const paragraphs = await page.$$('.ProseMirror p');
    expect(paragraphs.length).toBe(3);

    if (paragraphs.length < 2) {
      console.log('‚ö†Ô∏è Not enough paragraphs for drag test');
      return;
    }

    const firstP = paragraphs[0];
    const secondP = paragraphs[1];

    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    const firstText = await firstP.textContent();
    const secondText = await secondP.textContent();

    console.log(`üìç First: "${firstText}", Second: "${secondText}"`);

    // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–∞ –≤—Ç–æ—Ä–æ–π
    const firstBbox = await firstP.boundingBox();
    const secondBbox = await secondP.boundingBox();

    if (!firstBbox || !secondBbox) {
      console.log('‚ö†Ô∏è Cannot get bounding boxes');
      return;
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º drag & drop
    await page.mouse.move(firstBbox.x + firstBbox.width / 2, firstBbox.y + firstBbox.height / 2);
    await page.mouse.down();
    await page.waitForTimeout(200);
    
    await page.mouse.move(secondBbox.x + secondBbox.width / 2, secondBbox.y + secondBbox.height / 2);
    await page.waitForTimeout(200);
    
    await page.mouse.up();
    await page.waitForTimeout(500);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
    const newFirstText = await firstP.textContent();
    const newSecondText = await secondP.textContent();

    console.log(`üìç After drag - First: "${newFirstText}", Second: "${newSecondText}"`);

    // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    expect(newFirstText).toBeTruthy();
    expect(newSecondText).toBeTruthy();
    
    console.log('‚úÖ Drag operation completed without errors');
  });

  test('Cursor should change to grab/grabbing', async ({ page }) => {
    await page.evaluate(() => {
      const editor = (window as any).__editor;
      if (editor?.commands?.setContent) {
        editor.commands.setContent('<p>Draggable block</p>');
      }
    });

    await page.waitForTimeout(500);

    const p = await page.$('.ProseMirror p');
    if (!p) return;

    // –ù–∞–≤–æ–¥–∏–º –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
    await p.hover();
    await page.waitForTimeout(200);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º cursor
    const cursorStyle = await p.evaluate((el) => {
      return window.getComputedStyle(el).cursor;
    });

    console.log(`üñ±Ô∏è Cursor style: ${cursorStyle}`);
    expect(cursorStyle).toMatch(/grab|auto/i);
  });

  test('Drag handle should appear and disappear correctly', async ({ page }) => {
    await page.evaluate(() => {
      const editor = (window as any).__editor;
      if (editor?.commands?.setContent) {
        editor.commands.setContent('<p>Test block</p>');
      }
    });

    await page.waitForTimeout(500);

    const p = await page.$('.ProseMirror p');
    if (!p) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ handle –Ω–µ –≤–∏–¥–Ω–∞ –±–µ–∑ hover
    let handleVisible = await page.evaluate(() => {
      const elem = document.querySelector('.ProseMirror p');
      if (!elem) return false;
      const styles = window.getComputedStyle(elem, '::before');
      return parseFloat(styles.opacity) > 0;
    });

    console.log(`üö´ Handle visible before hover: ${handleVisible}`);
    expect(handleVisible).toBe(false);

    // –ù–∞–≤–æ–¥–∏–º
    await p.hover();
    await page.waitForTimeout(300);

    handleVisible = await page.evaluate(() => {
      const elem = document.querySelector('.ProseMirror p');
      if (!elem) return false;
      const styles = window.getComputedStyle(elem, '::before');
      return parseFloat(styles.opacity) > 0;
    });

    console.log(`‚úÖ Handle visible after hover: ${handleVisible}`);
    expect(handleVisible).toBe(true);

    // –£–±–∏—Ä–∞–µ–º –º—ã—à—å
    await page.mouse.move(0, 0);
    await page.waitForTimeout(300);

    handleVisible = await page.evaluate(() => {
      const elem = document.querySelector('.ProseMirror p');
      if (!elem) return false;
      const styles = window.getComputedStyle(elem, '::before');
      return parseFloat(styles.opacity) > 0;
    });

    console.log(`üö´ Handle visible after mouse away: ${handleVisible}`);
  });

  test('DraggableBlock extension should be loaded', async ({ page }) => {
    const extensionLoaded = await page.evaluate(() => {
      const editor = (window as any).__editor;
      return editor?.extensionManager.extensions.find(
        (e: any) => e.name === 'draggableBlock'
      ) ? true : false;
    });

    console.log(`${extensionLoaded ? '‚úÖ' : '‚ùå'} DraggableBlock extension loaded`);
    expect(extensionLoaded).toBe(true);
  });
});
